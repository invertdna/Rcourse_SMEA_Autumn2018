by = list(ufo$year),      #give R one or more grouping variables in a list
FUN = length)             #tell R what function you want to apply to each of the groups
head(sightings.by.year)
sightings.by.year <-                    #create a new object
aggregate(ufo$datetime,             #use the aggregate function on a dataset
by = list(ufo$year),      #give R one or more grouping variables in a list
FUN = length)             #tell R what function you want to apply to each of the groups
head(sightings.by.year)
names(sightings.by.year) <- c("Year", "Sightings")
head(sightings.by.year)
plot(sightings.by.year, pch = 19, type = "b")
sightings.by.country.year <-
aggregate(ufo$datetime,             #use the aggregate function on a dataset
by = list(ufo$year, ufo$country),      #give R one or more grouping variables in a list
FUN = length)             #tell R what function you want to apply to each of the groups
names(sightings.by.country.year)<- c("Year", "Country", "Sightings")  #rename
head(sightings.by.country.year)
sightings.by.country.year <- sightings.by.country.year[sightings.by.country.year$Country!="",]
head(sightings.by.country.year)
par(mfrow=c(5,1))
par(mar = c(2,2,1,1))
for (i in unique(sightings.by.country.year$Country)){
plot(Sightings~Year,
data = sightings.by.country.year[sightings.by.country.year$Country == i,],
xlim = c(1910,2010),
pch = 19, type = "b",
main = i)
}
ufo %>%                        #take your dataset and pipe it
group_by(year) %>%           #tell R you want to group observations by the column `year`
summarize(Sightings = n())  ->
tidy.sightings
tidy.sightings
#Then we'll pipe this to ggplot for plotting
tidy.sightings %>%
ggplot(aes(x = year, y = Sightings)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  #rotate x-axis labels for legibility
ufo %>%                        #take your dataset and pipe it
filter(country!="") %>%  #filter out those with no country listed
group_by(year, country) %>%  #tell R you want to group observations by the columns `year` and `country`
summarize(Sightings = n())  ->
tidy.sightings.country
tidy.sightings.country
#now plot
tidy.sightings.country %>%
ggplot(aes(x = year, y = Sightings, color = country)) +
geom_point()
tidy.sightings.country %>%
ggplot(aes(x = year, y = Sightings, color = country)) +
geom_point() +
facet_wrap(~country, scales = "free_y") +
theme(axis.text.x = element_blank())  #suppress x-axis labels for legibility
ufo %>%                        #take your dataset and pipe it
filter(country!="") %>%  #filter out those with no country listed
group_by(year) %>%
#tell R you want to group observations by the columns `year` and `country`
# summarize(Sightings = n())
mutate(tot.peryear = n())
ufo %>%                        #take your dataset and pipe it
filter(country!="") %>%  #filter out those with no country listed
group_by(year) %>%
#tell R you want to group observations by the columns `year` and `country`
# summarize(Sightings = n())
mutate(tot.peryear = n()) %>%
group_by(country) %>%
summarise(proportion.per.year = n()/tot.peryear)
ufo %>%                        #take your dataset and pipe it
filter(country!="") %>%  #filter out those with no country listed
group_by(year) %>%
#tell R you want to group observations by the columns `year` and `country`
# summarize(Sightings = n())
mutate(tot.peryear = n()) %>%
group_by(country,year) %>%
summarise(proportion.per.year = n()/tot.peryear)
ufo %>%                        #take your dataset and pipe it
filter(country!="") %>%  #filter out those with no country listed
group_by(year) %>%
#tell R you want to group observations by the columns `year` and `country`
# summarize(Sightings = n())
mutate(tot.peryear = n()) %>% select(year, tot.peryear)
ufo %>%                        #take your dataset and pipe it
filter(country!="") %>%  #filter out those with no country listed
group_by(year) %>%
#tell R you want to group observations by the columns `year` and `country`
# summarize(Sightings = n())
mutate(tot.peryear = n()) %>%
group_by(country,year) %>%
mutate(nsight = n()) %>%
summarise(proportion.per.year = nnsight/tot.peryear)
ufo %>%                        #take your dataset and pipe it
filter(country!="") %>%  #filter out those with no country listed
group_by(year) %>%
#tell R you want to group observations by the columns `year` and `country`
# summarize(Sightings = n())
mutate(tot.peryear = n()) %>%
group_by(country,year) %>%
mutate(nsight = n()) %>%
summarise(proportion.per.year = nsight/tot.peryear)
sightings.by.country.year
split.country <- split(sightings.by.country.year,
f =sightings.by.country.year$Country,
drop = T)
split.country
lapply(split.country, FUN = nrow)  #count rows in each of the sub-datasets, which reflects the number of unique years in which sightings occurred
split.country <- split(ufo,
f =ufo$country,
drop = T)
split.country
lapply(split.country, mean(.$duration..seconds))
lapply(split.country, function(x) mean(x$duration..seconds))
lapply(split.country, function(x) mean(x$duration..seconds, na.rm=T))
lapply(split.country, function(x) mean(as.numeric(x$duration..seconds, na.rm=T)))
lapply(split.country, function(x) {mean(as.numeric(x$duration..seconds, na.rm=T))})
ufo %>%
group_by(country) %>%
mutate(duration = as.numeric(duration..seconds.)) %>%  #need to coerce duration to be a number... note the use of `mutate` here to change/create a variable, without changing the number of observations in the dataset
summarize(median.duration = median(duration, na.rm=T))
?summarise
mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(disp), n = n())
library(ggmap)
register_google(key = "AIzaSyCeloL13Ah7DykMnnwvTz8744fEn5N9sGE")
where <- geocode("United States")
map <- get_map(location = where, zoom = 2, source = "stamen")
ggmap(map)
map <- get_map(location = where, zoom = 3, source = "stamen")
ggmap(map)
map <- get_map(location = where, zoom = 4, source = "stamen")
ggmap(map)
ggmap(map) +
geom_point(data = ufo, aes(x = longitude, y = latitude))
ggmap(map) +
geom_point(data = ufo, aes(x = longitude, y = latitude))
ggmap(map) +
geom_point(data = ufo, aes(x = longitude, y = as.numeric(latitude)))
ggmap(map) +
geom_point(data = ufo[ufo$year == 1949,], aes(x = longitude, y = as.numeric(latitude)))
ggmap(map) +
geom_point(data = ufo[ufo$year == 1947,], aes(x = longitude, y = as.numeric(latitude)))
ggmap(map) +
geom_point(data = ufo[ufo$year == 1947,], aes(x = longitude, y = as.numeric(latitude), size = nchar(comments)))
ggmap(map) +
geom_point(data = ufo[ufo$year == 2005,], aes(x = longitude, y = as.numeric(latitude), size = nchar(comments)))
ggmap(map) +
geom_point(data = ufo[ufo$year == 1947,], aes(x = longitude, y = as.numeric(latitude), size = nchar(comments)))
unique(ufo$year)
ggmap(map) +
geom_point(data = ufo[ufo$year == 2005,], aes(x = longitude, y = as.numeric(latitude), size = nchar(comments)))
ggmap(map) +
geom_point(data = ufo[ufo$year == 2005,], aes(x = longitude, y = as.numeric(latitude)))
where <- geocode("Alaska")
map <- get_map(location = where, zoom = 4, source = "stamen")
ggmap(map) +
geom_point(data = ufo[ufo$year == 2005,], aes(x = longitude, y = as.numeric(latitude)))
where <- geocode("Hawaii")
map <- get_map(location = where, zoom = 5, source = "stamen")
ggmap(map) +
geom_point(data = ufo[ufo$year == 2005,], aes(x = longitude, y = as.numeric(latitude)))
where <- geocode("United States")
map <- get_map(location = where, zoom = 4, source = "stamen")
ggmap(map) +
geom_point(data = ufo[ufo$year == 1975,], aes(x = longitude, y = as.numeric(latitude)))
ggmap(map) +
geom_point(data = ufo[ufo$year == 1976,], aes(x = longitude, y = as.numeric(latitude)))
ggmap(map) +
geom_point(data = ufo[ufo$year == 1977,], aes(x = longitude, y = as.numeric(latitude)))
ggmap(map) +
geom_point(data = ufo[ufo$year == 1974,], aes(x = longitude, y = as.numeric(latitude)))
ggmap(map) +
geom_point(data = ufo[ufo$year == 1975,], aes(x = longitude, y = as.numeric(latitude)))
ggmap(map) +
geom_point(data = ufo[ufo$year == 1978,], aes(x = longitude, y = as.numeric(latitude)))
library(knitr)
options(width=60)
require(knitr)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE, message = F, warning = F)
library(tidyverse)
library(lubridate)
library(yarrr)
head(pirates)
head(diamonds)
head(mtcars)
head(mtcars[,1:3])
t(head(mtcars[,1:3]))
head(mtcars[,1:3]) %>%
rownames_to_column("Model") %>%
gather()
head(mtcars[,1:3]) %>%
rownames_to_column("Model") %>%
gather(key = "Measurement", value = "Value", -Model)
head(mtcars[,1:3])
cars
Cars <- head(mtcars[,1:3]) #make a small dataset to play with
Cars
Cars %>%
rownames_to_column("Model") %>%    #here, move rownames to a column and call that column `Model`
gather(#gather takes a few arguments, none of them intuitive:
key = "ThingMeasured",  #the `key` will be the column header containing the newly organized info
value = "Value",   #value is the measured value of the variable in the new column `ThingMeasured`
-Model #and here, we're telling **R** NOT to gather the new column `Model` into `ThingMeasured`; we want it to be treated differently
)
Cars %>%
rownames_to_column("Model") %>%    #here, move rownames to a column and call that column `Model`
gather(#gather takes a few arguments, none of them intuitive:
key = "ThingMeasured",  #the `key` will be the column header containing the newly organized info
value = "Value",   #value is the measured value of the variable in the new column `ThingMeasured`
-Model #and here, we're telling **R** NOT to gather the new column `Model` into `ThingMeasured`; we want it to be treated differently
) -> TidyCars  #create a new object called `TidyCars`
TidyCars
spread(TidyCars, key = "ThingMeasured", value = "Value")
TidyCars
ggplot(TidyCars, aes(x = Model, y = value)) +
geom_point() +
facet_wrap(~ThingMeasured)
ggplot(TidyCars, aes(x = Model, y = Value)) +
geom_point() +
facet_wrap(~ThingMeasured)
ggplot(TidyCars, aes(x = Model, y = Value)) +
geom_point() +
facet_wrap(~ThingMeasured, scales = "free")
ggplot(TidyCars, aes(x = Model, y = Value)) +
geom_point() +
facet_wrap(~ThingMeasured, scales = "free") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) #rotate x-axis labels
library ("tidyverse")
library ("reshape2")
library ("googlesheets")
library ("seacarb")
library ("vegan")
library ("lubridate")
library ("kableExtra")
library ("knitr")
library("broom")
Clasif <- read_csv("/Volumes/GoogleDrive/My Drive/Kelly_Lab/Projects/OA_eDNA/Data/4.Taxonomic_annotation/Final.Classification.Hashes2018-11-06.csv")
ASVs <- read_csv("/Volumes/GoogleDrive/My Drive/Kelly_Lab/Projects/OA_eDNA/Data/3.Growing_database/ASV_table_2018-11-06.csv")
ASVs %>% mutate(sample = str_replace(sample, "LL_201710_", "LL_201710")) -> ASVs # Fixing a bug
metadata <- gs_read_csv(gs_title("Samples_OA_good"), ws = "Samples_OA_good")
Taxonomy.spp <- read_csv("/Volumes/GoogleDrive/My Drive/Kelly_Lab/Projects/OA_eDNA/Analysis/Analysis.for.WSC/LineageLookupTable.csv")
Taxonomy.fam <-  read_csv("/Volumes/GoogleDrive/My Drive/Kelly_Lab/Projects/OA_eDNA/Analysis/Analysis.for.WSC/LineageLookupTable.families.csv")
Order.Sites <- c("SA","TR","LL","PO","TW")
distance.to.Salsbury <- tibble(Site = Order.Sites,
Distance = c(0,41.4,60.31,71.96,85.41),
lon = c(-122.607721,-122.984734,-123.103774,-123.155597,-122.97483),
lat = c(47.856772,47.608961,47.462959,47.35981,47.378431))
Taxonomy.spp %>%
group_by (Phylum) %>%
summarise(fam = n_distinct(Family),
spp = n()) %>%
arrange(desc(`spp`)) %>%
filter(!is.na(Phylum)) %>%
kable(format = "html")
Taxonomy.spp %>%
filter (Phylum == "Chordata") %>% pull(Family) %>% unique()
Taxonomy.spp %>% filter (Family == "Passerellidae")
Family.dataset <- ASVs %>%
left_join(Clasif, by = "Hash") %>%
group_by(sample, Family) %>%
summarise(nReads = sum(nReads))
Species.dataset <- ASVs %>%
left_join(Clasif, by = "Hash") %>%
group_by(sample, Species) %>%
summarise (nReads = sum(nReads))
Species.dataset %>% ungroup %>% distinct(Species) %>%
filter(str_detect(Species, " ")) %>%
filter(!str_detect(Species, "No hits")) %>%
filter(!str_detect(Species, "Not ")) %>% pull()-> Species.to.keep
Family.dataset %>% ungroup %>% distinct(Family) %>%
filter(str_detect(Family, "idae|aceae"))  %>% pull()-> Families.to.keep
Family.dataset %>%
separate(sample, into = c("Site", "Month"), remove = F) %>%
separate(Month, into = c("Month", "Replicate"), sep = -2) %>%
unite(samplepoint,Site,Month) -> Family.dataset
# OA.Env <- gs_read_csv(gs_title("Samples_OA_good"), ws = "environmental_data")
#
# OA.Env$Temperature <- as.numeric(OA.Env$Temperature)
#
# OA.Env %>%
#   dplyr::select(OA_Sample_name, mean.TA, mean.DIC, Date, Salinity, `DO (%)`,Temperature) %>%
#   filter(!is.na(Temperature)&!is.na(mean.TA)) -> OA.Env
#
# Carb.1 <- carb(flag = 15, var1 = OA.Env$mean.TA*1e-6, var2 = OA.Env$mean.DIC*1e-6, S= OA.Env$Salinity, T = OA.Env$Temperature)
#
# Carb.1 %>% dplyr::select(pH, OmegaAragonite,OmegaCalcite) %>%
#   bind_cols(OA.Env,.) -> OA.Env
OA.Env <- read.csv("/Volumes/GoogleDrive/My Drive/Kelly_Lab/Projects/OA_eDNA/Analysis/Analysis.for.WSC/Env.data2018-11-27.csv")
OA.Env %>% separate(OA_Sample_name, into = "Site") %>%
ggplot (aes(x = Site,
y = OmegaAragonite)) +
geom_boxplot()
Species.dataset %>% ungroup %>% distinct(Species) %>%
filter(str_detect(Species, " ")) %>%
filter(!str_detect(Species, "No hits")) %>%
filter(!str_detect(Species, "Not ")) %>% pull()-> Species.to.keep
Species.dataset %>%
filter(Species %in% Species.to.keep) -> good.spp.dataset
Family.dataset %>% ungroup %>% distinct(Family) %>%
filter(str_detect(Family, "idae|aceae"))  %>% pull()-> Families.to.keep
Family.dataset %>%
filter(Family %in%Families.to.keep) -> good.fam.dataset
good.spp.dataset %>% separate(sample, into = c("Site", "Month"), remove = F) %>%
separate(Month, into = c("Month", "Replicate"), sep = -2) %>%
group_by(Species) %>%
summarise(nMonth = n_distinct(Month),
nreads = sum(nReads),
nSites =n_distinct(Site)) %>%
arrange(desc(nreads))
good.fam.dataset %>% group_by (sample) %>%
mutate (Tot = sum(nReads),
Row.prop = nReads / Tot) %>%
group_by (Family) %>%
mutate (Colmax = max (Row.prop),
Normalize.reads = Row.prop / Colmax) -> good.fam.normalized
good.fam.normalized %>%
dplyr::select(sample, Family, Normalize.reads) -> good.fam.normalized
Family.dataset %>% group_by (sample) %>%
mutate (Tot = sum(nReads),
Row.prop = nReads / Tot) %>%
group_by (Family) %>%
mutate (Colmax = max (Row.prop),
Normalize.reads = Row.prop / Colmax) -> all.fam.normalized
all.fam.normalized %>%
dplyr::select(sample, Family, Normalize.reads) -> all.fam.normalized
good.spp.dataset %>% group_by (sample) %>%
mutate (Tot = sum(nReads),
Row.prop = nReads / Tot) %>%
group_by (Species) %>%
mutate (Colmax = max (Row.prop),
Normalize.reads = Row.prop / Colmax) -> good.spp.normalized
good.spp.normalized %>%
dplyr::select(sample, Species, Normalize.reads) -> good.spp.normalized
# Summary stats
good.fam.normalized %>%
separate(sample, into = c("Site", "Month"), remove = F) %>%
separate(Month, into = c("Month", "Replicate"), sep = -1) %>%
mutate(Date = ymd(paste0(Month,"01")),
Month = month(Date, label = T),
Area = case_when(Site %in% Order.Sites ~ "Hood Canal",
Site %in% c("FH","CP","LK") ~ "San Juan Islands")) -> good.fam.metadata
good.spp.normalized %>%
separate(sample, into = c("Site", "Month"), remove = F) %>%
separate(Month, into = c("Month", "Replicate"), sep = -1) %>%
mutate(Date = ymd(paste0(Month,"01")),
Month = month(Date, label = T),
Area = case_when(Site %in% Order.Sites ~ "Hood Canal",
Site %in% c("FH","CP","LK") ~ "San Juan Islands")) -> good.spp.metadata
good.spp.metadata %>%
filter(grepl("Oncorhynchus", Species)) %>%
ggplot(aes(x = Month, y = Normalize.reads, color = Species, Site)) +
geom_point() +
facet_grid(Species~Site)
all.fam.env <- all.fam.normalized %>%
mutate(OA_Sample_name = substr(sample, 1, 9)) %>%
separate(OA_Sample_name, into = c("Site", "Month"), remove = F) %>%
full_join(OA.Env)
good.fam.env <- good.fam.metadata %>%
mutate(OA_Sample_name = substr(sample, 1, 9)) %>%
select(-Date) %>%
full_join(OA.Env)
good.spp.env <- good.spp.metadata %>%
mutate(OA_Sample_name = substr(sample, 1, 9)) %>%
select(-Date) %>%
full_join(OA.Env)
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 20) %>%
filter(Site %in% c("TW", "PO", "LL", "TR", "SA")) %>%
do(fit =  lm(Normalize.reads ~ Temperature + Salinity + OmegaAragonite, data = .)) %>%
tidy(fit) %>%
filter(term == "OmegaAragonite") %>%
select(statistic) %>%
arrange(desc(abs(statistic)))
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 20)
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 20) %>%
filter(Site %in% c("TW", "PO", "LL", "TR", "SA"))
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 20)
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 20) %>%
#filter(Site %in% c("TW", "PO", "LL", "TR", "SA")) %>%
do(fit =  lm(Normalize.reads ~ Temperature + Salinity + OmegaAragonite, data = .)) %>%
tidy(fit) %>%
filter(term == "OmegaAragonite") %>%
select(statistic) %>%
arrange(desc(abs(statistic)))
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 20)
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 20) %>%
#filter(Site %in% c("TW", "PO", "LL", "TR", "SA")) %>%
do(fit =  lm(Normalize.reads ~ Temperature + Salinity + OmegaAragonite, data = .))
good.fam.env %>%
filter(Family %in% c("Cymatosiraceae", "Kareniaceae")) %>%
#filter(Site %in% c("TW", "PO", "LL", "TR", "SA")) %>%
ggplot(aes(x = OmegaAragonite, y = Normalize.reads, color = Site)) +
geom_jitter(alpha = .5) +
geom_smooth(color = "grey", alpha = 0.5) +
facet_wrap(~Family) +
theme_bw()
pairs(OA.Env)
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 30) %>%
#filter(Site %in% c("TW", "PO", "LL", "TR", "SA")) %>%
do(fit =  lm(Normalize.reads ~ Temperature + Salinity + OmegaAragonite, data = .))
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 10)
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 20) %>%
#filter(Site %in% c("TW", "PO", "LL", "TR", "SA")) %>%
do(fit =  lm(Normalize.reads ~ Temperature + Salinity + OmegaAragonite, data = .))
OA.Env <- read.csv("/Volumes/GoogleDrive/My Drive/Kelly_Lab/Projects/OA_eDNA/Analysis/Analysis.for.WSC/Env.data2018-11-27.csv")
View(OA.Env)
View(OA.Env)
OA.Env %>% separate(OA_Sample_name, into = "Site") %>%
ggplot (aes(x = Site,
y = OmegaAragonite)) +
geom_boxplot()
good.fam.env <- good.fam.metadata %>%
mutate(OA_Sample_name = substr(sample, 1, 9)) %>%
select(-Date) %>%
full_join(OA.Env)
sum(is.na(good.fam.env))
good.fam.env <- good.fam.metadata %>%
mutate(OA_Sample_name = substr(sample, 1, 9)) %>%
select(-Date) %>%
left_join(OA.Env)
sum(is.na(good.fam.env))
good.fam.env <- good.fam.metadata %>%
mutate(OA_Sample_name = substr(sample, 1, 9)) %>%
select(-Date) %>%
right_join(OA.Env)
sum(is.na(good.fam.env))
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 20) %>%
#filter(Site %in% c("TW", "PO", "LL", "TR", "SA")) %>%
do(fit =  lm(Normalize.reads ~ Temperature + Salinity + OmegaAragonite, data = .)) %>%
tidy(fit) %>%
filter(term == "OmegaAragonite") %>%
select(statistic) %>%
arrange(desc(abs(statistic)))
for (i in 1:ncol(good.fam.env)){
print(sum(is.na(good.fam.env[,i])))
}
names(good.fam.env)
head(good.fam.env)
good.fam.env <- good.fam.metadata %>%
mutate(OA_Sample_name = substr(sample, 1, 9)) %>%
select(-Date) %>%
right_join(OA.Env) %>%
filter(!is.na(sample))
OmegaFit <- good.fam.env %>%
group_by(Family) %>%
filter(n() > 20) %>%
#filter(Site %in% c("TW", "PO", "LL", "TR", "SA")) %>%
do(fit =  lm(Normalize.reads ~ Temperature + Salinity + OmegaAragonite, data = .)) %>%
tidy(fit) %>%
filter(term == "OmegaAragonite") %>%
select(statistic) %>%
arrange(desc(abs(statistic)))
head(OmegaFit)
good.fam.env %>%
filter(Family %in% c("Cymatosiraceae", "Kareniaceae", "Noelaerhabdaceae")) %>%
#filter(Site %in% c("TW", "PO", "LL", "TR", "SA")) %>%
ggplot(aes(x = OmegaAragonite, y = Normalize.reads, color = Site)) +
geom_jitter(alpha = .5) +
geom_smooth(color = "grey", alpha = 0.5) +
facet_wrap(~Family) +
theme_bw()
#by time
good.fam.env %>%
filter(Family %in% c("Cymatosiraceae", "Kareniaceae", "Noelaerhabdaceae")) %>%
#filter(Site %in% c("TW", "PO", "LL", "TR", "SA")) %>%
ggplot(aes(x = Month, y = Normalize.reads, color = Site)) +
geom_boxplot(alpha = 0.5) +
#geom_jitter(alpha = .5) +
facet_grid(Site~Family) +
theme_bw()
ç
library(here)
here(Analysis)
here("Analysis")
here("Analysis/Scripts/R")
library(knitr)
install.packages("tidyverse")
library(knitr)
library(tidyverse)
install.packages("lubridate")
install.packages("yarrr")
library(lubridate)
library(yarrr)
library(tidyverse)
install.packages()
install.packages("httr")
install.packages("httr")
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("xml2")
install.packages("xml2")
